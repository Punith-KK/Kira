/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ITazza {
  export type PlayerStruct = {
    addr: PromiseOrValue<string>;
    public_key: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type PlayerStructOutput = [string, [BigNumber, BigNumber]] & {
    addr: string;
    public_key: [BigNumber, BigNumber];
  };

  export type CardStruct = {
    c1_x: PromiseOrValue<BigNumberish>;
    c1_y: PromiseOrValue<BigNumberish>;
    c2_x: PromiseOrValue<BigNumberish>;
    c2_y: PromiseOrValue<BigNumberish>;
    flag: PromiseOrValue<BigNumberish>;
  };

  export type CardStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    c1_x: BigNumber;
    c1_y: BigNumber;
    c2_x: BigNumber;
    c2_y: BigNumber;
    flag: BigNumber;
  };
}

export interface IndianPokerSoloInterface extends utils.Interface {
  functions: {
    "TAZZA()": FunctionFragment;
    "game_count()": FunctionFragment;
    "game_per_player(address)": FunctionFragment;
    "game_states(uint256)": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "round1(uint256,(uint256,uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "round2(uint256)": FunctionFragment;
    "round3(uint256,bool)": FunctionFragment;
    "round4(uint256)": FunctionFragment;
    "round5(uint256,bool)": FunctionFragment;
    "start_game(uint256[24],uint256[2])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TAZZA"
      | "game_count"
      | "game_per_player"
      | "game_states"
      | "games"
      | "round1"
      | "round2"
      | "round3"
      | "round4"
      | "round5"
      | "start_game"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "TAZZA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "game_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "game_per_player",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "game_states",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "games",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "round1",
    values: [PromiseOrValue<BigNumberish>, ITazza.CardStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "round2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "round3",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "round4",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "round5",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "start_game",
    values: [
      PromiseOrValue<BigNumberish>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "TAZZA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "game_count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "game_per_player",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "game_states",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "round1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "round2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "round3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "round4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "round5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start_game", data: BytesLike): Result;

  events: {
    "Draw(uint256,address)": EventFragment;
    "Lose(uint256,address,uint256)": EventFragment;
    "Round(uint256,uint256)": EventFragment;
    "StartGame(uint256,address,uint256)": EventFragment;
    "Win(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Draw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Round"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Win"): EventFragment;
}

export interface DrawEventObject {
  game_ind: BigNumber;
  player: string;
}
export type DrawEvent = TypedEvent<[BigNumber, string], DrawEventObject>;

export type DrawEventFilter = TypedEventFilter<DrawEvent>;

export interface LoseEventObject {
  game_ind: BigNumber;
  player: string;
  amount: BigNumber;
}
export type LoseEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LoseEventObject
>;

export type LoseEventFilter = TypedEventFilter<LoseEvent>;

export interface RoundEventObject {
  game_ind: BigNumber;
  round: BigNumber;
}
export type RoundEvent = TypedEvent<[BigNumber, BigNumber], RoundEventObject>;

export type RoundEventFilter = TypedEventFilter<RoundEvent>;

export interface StartGameEventObject {
  game_ind: BigNumber;
  player: string;
  bet: BigNumber;
}
export type StartGameEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  StartGameEventObject
>;

export type StartGameEventFilter = TypedEventFilter<StartGameEvent>;

export interface WinEventObject {
  game_ind: BigNumber;
  player: string;
  amount: BigNumber;
}
export type WinEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  WinEventObject
>;

export type WinEventFilter = TypedEventFilter<WinEvent>;

export interface IndianPokerSolo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IndianPokerSoloInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TAZZA(overrides?: CallOverrides): Promise<[string]>;

    game_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    game_per_player(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    game_states(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        round: BigNumber;
        deck_ind: BigNumber;
        choice: boolean;
      }
    >;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, ITazza.PlayerStructOutput] & {
        bet: BigNumber;
        player: ITazza.PlayerStructOutput;
      }
    >;

    round1(
      game_ind: PromiseOrValue<BigNumberish>,
      cards: ITazza.CardStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    round2(
      game_ind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    round3(
      game_ind: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    round4(
      game_ind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    round5(
      game_ind: PromiseOrValue<BigNumberish>,
      opponent_choice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    start_game(
      proof: PromiseOrValue<BigNumberish>[],
      public_key: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  TAZZA(overrides?: CallOverrides): Promise<string>;

  game_count(overrides?: CallOverrides): Promise<BigNumber>;

  game_per_player(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  game_states(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      round: BigNumber;
      deck_ind: BigNumber;
      choice: boolean;
    }
  >;

  games(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, ITazza.PlayerStructOutput] & {
      bet: BigNumber;
      player: ITazza.PlayerStructOutput;
    }
  >;

  round1(
    game_ind: PromiseOrValue<BigNumberish>,
    cards: ITazza.CardStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  round2(
    game_ind: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  round3(
    game_ind: PromiseOrValue<BigNumberish>,
    choice: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  round4(
    game_ind: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  round5(
    game_ind: PromiseOrValue<BigNumberish>,
    opponent_choice: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  start_game(
    proof: PromiseOrValue<BigNumberish>[],
    public_key: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TAZZA(overrides?: CallOverrides): Promise<string>;

    game_count(overrides?: CallOverrides): Promise<BigNumber>;

    game_per_player(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    game_states(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        round: BigNumber;
        deck_ind: BigNumber;
        choice: boolean;
      }
    >;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, ITazza.PlayerStructOutput] & {
        bet: BigNumber;
        player: ITazza.PlayerStructOutput;
      }
    >;

    round1(
      game_ind: PromiseOrValue<BigNumberish>,
      cards: ITazza.CardStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    round2(
      game_ind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    round3(
      game_ind: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    round4(
      game_ind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    round5(
      game_ind: PromiseOrValue<BigNumberish>,
      opponent_choice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    start_game(
      proof: PromiseOrValue<BigNumberish>[],
      public_key: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Draw(uint256,address)"(game_ind?: null, player?: null): DrawEventFilter;
    Draw(game_ind?: null, player?: null): DrawEventFilter;

    "Lose(uint256,address,uint256)"(
      game_ind?: null,
      player?: null,
      amount?: null
    ): LoseEventFilter;
    Lose(game_ind?: null, player?: null, amount?: null): LoseEventFilter;

    "Round(uint256,uint256)"(game_ind?: null, round?: null): RoundEventFilter;
    Round(game_ind?: null, round?: null): RoundEventFilter;

    "StartGame(uint256,address,uint256)"(
      game_ind?: null,
      player?: null,
      bet?: null
    ): StartGameEventFilter;
    StartGame(game_ind?: null, player?: null, bet?: null): StartGameEventFilter;

    "Win(uint256,address,uint256)"(
      game_ind?: null,
      player?: null,
      amount?: null
    ): WinEventFilter;
    Win(game_ind?: null, player?: null, amount?: null): WinEventFilter;
  };

  estimateGas: {
    TAZZA(overrides?: CallOverrides): Promise<BigNumber>;

    game_count(overrides?: CallOverrides): Promise<BigNumber>;

    game_per_player(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    game_states(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    round1(
      game_ind: PromiseOrValue<BigNumberish>,
      cards: ITazza.CardStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    round2(
      game_ind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    round3(
      game_ind: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    round4(
      game_ind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    round5(
      game_ind: PromiseOrValue<BigNumberish>,
      opponent_choice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    start_game(
      proof: PromiseOrValue<BigNumberish>[],
      public_key: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TAZZA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    game_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    game_per_player(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    game_states(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    games(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    round1(
      game_ind: PromiseOrValue<BigNumberish>,
      cards: ITazza.CardStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    round2(
      game_ind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    round3(
      game_ind: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    round4(
      game_ind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    round5(
      game_ind: PromiseOrValue<BigNumberish>,
      opponent_choice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    start_game(
      proof: PromiseOrValue<BigNumberish>[],
      public_key: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
