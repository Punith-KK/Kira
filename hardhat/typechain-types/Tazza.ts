/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ITazza {
  export type PlayerStruct = {
    addr: PromiseOrValue<string>;
    public_key: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type PlayerStructOutput = [string, [BigNumber, BigNumber]] & {
    addr: string;
    public_key: [BigNumber, BigNumber];
  };

  export type CardStruct = {
    c1_x: PromiseOrValue<BigNumberish>;
    c1_y: PromiseOrValue<BigNumberish>;
    c2_x: PromiseOrValue<BigNumberish>;
    c2_y: PromiseOrValue<BigNumberish>;
    flag: PromiseOrValue<BigNumberish>;
  };

  export type CardStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    c1_x: BigNumber;
    c1_y: BigNumber;
    c2_x: BigNumber;
    c2_y: BigNumber;
    flag: BigNumber;
  };
}

export interface TazzaInterface extends utils.Interface {
  functions: {
    "createShuffledDeckVerifier()": FunctionFragment;
    "create_deck(address,(address,uint256[2])[],uint256)": FunctionFragment;
    "create_shuffled_deck(uint256,uint256[24],uint256[18])": FunctionFragment;
    "deck_count()": FunctionFragment;
    "decks(uint256)": FunctionFragment;
    "decode_card((address,uint256[2])[],(uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "decrypt_card(uint256,uint256,uint256)": FunctionFragment;
    "encode_card((address,uint256[2])[],uint256)": FunctionFragment;
    "keyGenerationVerifier()": FunctionFragment;
    "open_card(uint256,uint256)": FunctionFragment;
    "shuffle_deck(uint256,(uint256,uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "verify_public_key(uint256[24],uint256[2])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createShuffledDeckVerifier"
      | "create_deck"
      | "create_shuffled_deck"
      | "deck_count"
      | "decks"
      | "decode_card"
      | "decrypt_card"
      | "encode_card"
      | "keyGenerationVerifier"
      | "open_card"
      | "shuffle_deck"
      | "verify_public_key"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createShuffledDeckVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create_deck",
    values: [
      PromiseOrValue<string>,
      ITazza.PlayerStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create_shuffled_deck",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deck_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decode_card",
    values: [ITazza.PlayerStruct[], ITazza.CardStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "decrypt_card",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "encode_card",
    values: [ITazza.PlayerStruct[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "keyGenerationVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "open_card",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "shuffle_deck",
    values: [PromiseOrValue<BigNumberish>, ITazza.CardStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verify_public_key",
    values: [
      PromiseOrValue<BigNumberish>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createShuffledDeckVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_deck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create_shuffled_deck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deck_count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decode_card",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrypt_card",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encode_card",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyGenerationVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open_card", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shuffle_deck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verify_public_key",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Tazza extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TazzaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createShuffledDeckVerifier(overrides?: CallOverrides): Promise<[string]>;

    create_deck(
      owner: PromiseOrValue<string>,
      players: ITazza.PlayerStruct[],
      num_cards: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create_shuffled_deck(
      deck_ind: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      pubSignals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deck_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    decks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        num_players: BigNumber;
        num_cards: BigNumber;
      }
    >;

    decode_card(
      arg0: ITazza.PlayerStruct[],
      card: ITazza.CardStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { c: BigNumber }>;

    decrypt_card(
      deck_ind: PromiseOrValue<BigNumberish>,
      card_ind: PromiseOrValue<BigNumberish>,
      player_index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encode_card(
      arg0: ITazza.PlayerStruct[],
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ITazza.CardStructOutput] & { card: ITazza.CardStructOutput }>;

    keyGenerationVerifier(overrides?: CallOverrides): Promise<[string]>;

    open_card(
      deck_ind: PromiseOrValue<BigNumberish>,
      card_ind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shuffle_deck(
      deck_ind: PromiseOrValue<BigNumberish>,
      cards: ITazza.CardStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify_public_key(
      proof: PromiseOrValue<BigNumberish>[],
      pubSignals: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createShuffledDeckVerifier(overrides?: CallOverrides): Promise<string>;

  create_deck(
    owner: PromiseOrValue<string>,
    players: ITazza.PlayerStruct[],
    num_cards: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create_shuffled_deck(
    deck_ind: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BigNumberish>[],
    pubSignals: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deck_count(overrides?: CallOverrides): Promise<BigNumber>;

  decks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      num_players: BigNumber;
      num_cards: BigNumber;
    }
  >;

  decode_card(
    arg0: ITazza.PlayerStruct[],
    card: ITazza.CardStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decrypt_card(
    deck_ind: PromiseOrValue<BigNumberish>,
    card_ind: PromiseOrValue<BigNumberish>,
    player_index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encode_card(
    arg0: ITazza.PlayerStruct[],
    c: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ITazza.CardStructOutput>;

  keyGenerationVerifier(overrides?: CallOverrides): Promise<string>;

  open_card(
    deck_ind: PromiseOrValue<BigNumberish>,
    card_ind: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shuffle_deck(
    deck_ind: PromiseOrValue<BigNumberish>,
    cards: ITazza.CardStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify_public_key(
    proof: PromiseOrValue<BigNumberish>[],
    pubSignals: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createShuffledDeckVerifier(overrides?: CallOverrides): Promise<string>;

    create_deck(
      owner: PromiseOrValue<string>,
      players: ITazza.PlayerStruct[],
      num_cards: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create_shuffled_deck(
      deck_ind: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      pubSignals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    deck_count(overrides?: CallOverrides): Promise<BigNumber>;

    decks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        num_players: BigNumber;
        num_cards: BigNumber;
      }
    >;

    decode_card(
      arg0: ITazza.PlayerStruct[],
      card: ITazza.CardStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decrypt_card(
      deck_ind: PromiseOrValue<BigNumberish>,
      card_ind: PromiseOrValue<BigNumberish>,
      player_index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    encode_card(
      arg0: ITazza.PlayerStruct[],
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ITazza.CardStructOutput>;

    keyGenerationVerifier(overrides?: CallOverrides): Promise<string>;

    open_card(
      deck_ind: PromiseOrValue<BigNumberish>,
      card_ind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shuffle_deck(
      deck_ind: PromiseOrValue<BigNumberish>,
      cards: ITazza.CardStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    verify_public_key(
      proof: PromiseOrValue<BigNumberish>[],
      pubSignals: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    createShuffledDeckVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    create_deck(
      owner: PromiseOrValue<string>,
      players: ITazza.PlayerStruct[],
      num_cards: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create_shuffled_deck(
      deck_ind: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      pubSignals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deck_count(overrides?: CallOverrides): Promise<BigNumber>;

    decks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decode_card(
      arg0: ITazza.PlayerStruct[],
      card: ITazza.CardStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decrypt_card(
      deck_ind: PromiseOrValue<BigNumberish>,
      card_ind: PromiseOrValue<BigNumberish>,
      player_index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encode_card(
      arg0: ITazza.PlayerStruct[],
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyGenerationVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    open_card(
      deck_ind: PromiseOrValue<BigNumberish>,
      card_ind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shuffle_deck(
      deck_ind: PromiseOrValue<BigNumberish>,
      cards: ITazza.CardStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify_public_key(
      proof: PromiseOrValue<BigNumberish>[],
      pubSignals: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createShuffledDeckVerifier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create_deck(
      owner: PromiseOrValue<string>,
      players: ITazza.PlayerStruct[],
      num_cards: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create_shuffled_deck(
      deck_ind: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      pubSignals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deck_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decode_card(
      arg0: ITazza.PlayerStruct[],
      card: ITazza.CardStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decrypt_card(
      deck_ind: PromiseOrValue<BigNumberish>,
      card_ind: PromiseOrValue<BigNumberish>,
      player_index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encode_card(
      arg0: ITazza.PlayerStruct[],
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyGenerationVerifier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    open_card(
      deck_ind: PromiseOrValue<BigNumberish>,
      card_ind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shuffle_deck(
      deck_ind: PromiseOrValue<BigNumberish>,
      cards: ITazza.CardStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify_public_key(
      proof: PromiseOrValue<BigNumberish>[],
      pubSignals: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
